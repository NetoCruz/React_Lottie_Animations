{"version":3,"sources":["component/UncontrolledLottie.js","component/ControlledLottie.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["UncontrolledLottie","defaultOptions","loop","autoplay","animationData","react_default","a","createElement","className","dist_default","options","height","width","Component","ControlledLottie","state","isStopped","isPaused","_this2","this","buttonStyle","display","margin","marginRight","border","color","backgroundColor","borderRadius","fontSize","rendererSettings","preserveAspectRatio","style","onClick","setState","App","component_UncontrolledLottie","component_ControlledLottie","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6NAyBeA,mLAnBX,IAAMC,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,GAMjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,QAAST,EAAgBU,OAAQ,IAAKC,MAAO,cAf5BC,qBC0DlBC,6MAzDbC,MAAQ,CAAEC,WAAW,EAAOC,UAAU,2EAE7B,IAAAC,EAAAC,KACDC,EAAc,CAClBC,QAAS,eACTC,OAAQ,YACRC,YAAa,OACbC,OAAQ,OACRC,MAAO,QACPC,gBAAiB,UACjBC,aAAc,MACdC,SAAU,QAGN3B,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfyB,iBAAkB,CAChBC,oBAAqB,mBAIzB,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,QAAST,EACTU,OAAQ,IACRC,MAAO,IACPI,UAAWG,KAAKJ,MAAMC,UACtBC,SAAUE,KAAKJ,MAAME,WAEvBZ,EAAAC,EAAAC,cAAA,UACEwB,MAAOX,EACPY,QAAS,kBAAMd,EAAKe,SAAS,CAAEjB,WAAW,MAF5C,QAMAX,EAAAC,EAAAC,cAAA,UACEwB,MAAOX,EACPY,QAAS,kBAAMd,EAAKe,SAAS,CAAEjB,WAAW,EAAOC,UAAU,MAF7D,QAMAZ,EAAAC,EAAAC,cAAA,UACEwB,MAAOX,EACPY,QAAS,kBAAMd,EAAKe,SAAS,CAAEhB,UAAWC,EAAKH,MAAME,aAFvD,iBA/CuBJ,aCahBqB,mLATX,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,cALUvB,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6mmIEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.1d41ac20.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../lotties/5306-rocket-funk.json\";\r\nimport \"../App.css\";\r\nclass UncontrolledLottie extends Component {\r\n  render() {\r\n    const defaultOptions = {\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: animationData\r\n      //   rendererSettings: {\r\n      //     preserveAspectRatio: \"xMidYMid slice\"\r\n      //   }\r\n    };\r\n\r\n    return (\r\n      <div className=\"Uncontrolled\">\r\n        <h1>Uncontrolled Lottie</h1>\r\n        <p>Animación Libre que se autoejecuta</p>\r\n        <Lottie options={defaultOptions} height={400} width={400} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UncontrolledLottie;\r\n","import React, { Component } from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../lotties/5357-tel-aviv-skyline.json\";\r\n\r\nclass ControlledLottie extends Component {\r\n  state = { isStopped: false, isPaused: false };\r\n\r\n  render() {\r\n    const buttonStyle = {\r\n      display: \"inline-block\",\r\n      margin: \"10px auto\",\r\n      marginRight: \"10px\",\r\n      border: \"none\",\r\n      color: \"white\",\r\n      backgroundColor: \"#647DFF\",\r\n      borderRadius: \"2px\",\r\n      fontSize: \"15px\"\r\n    };\r\n\r\n    const defaultOptions = {\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: animationData,\r\n      rendererSettings: {\r\n        preserveAspectRatio: \"xMidYMid slice\"\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"controlled\">\r\n        <h1>Controlled Lottie</h1>\r\n        <p>Ocupamos estados para manipular la animación</p>\r\n        <Lottie\r\n          options={defaultOptions}\r\n          height={800}\r\n          width={800}\r\n          isStopped={this.state.isStopped}\r\n          isPaused={this.state.isPaused}\r\n        />\r\n        <button\r\n          style={buttonStyle}\r\n          onClick={() => this.setState({ isStopped: true })}\r\n        >\r\n          Stop\r\n        </button>\r\n        <button\r\n          style={buttonStyle}\r\n          onClick={() => this.setState({ isStopped: false, isPaused: false })}\r\n        >\r\n          Play\r\n        </button>\r\n        <button\r\n          style={buttonStyle}\r\n          onClick={() => this.setState({ isPaused: !this.state.isPaused })}\r\n        >\r\n          Pause\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlledLottie;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport UncontrolledLottie from \"./component/UncontrolledLottie\";\nimport ControlledLottie from \"./component/ControlledLottie\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <UncontrolledLottie />\n        <ControlledLottie />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}